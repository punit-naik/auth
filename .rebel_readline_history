1528422245357:(println "str")
1528422270527:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528422281367:(go\n  (let [response (<! (http/get "http://localhost:3000"))]\n    (prn response)))
1528422301090:(http/get "http://localhost:3000")
1528422325167:(go (<! (http/get "http://localhost:3000")))
1528422337177:(go (println (<! (http/get "http://localhost:3000"))))
1528422398028:(go (println (<! (http/get "http://127.0.0.1:3000"))))
1528422435786:(go (println (<! (http/get "http://www.google.co.in"))))
1528422991999:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528422997654:(go (println (<! (http/get "http://www.google.co.in"))))
1528423066908:(go (println (<! (http/get "http://localhost:3000"))))
1528423142787:(go (println (<! (http/get "http://localhost:3000" {:with-credentials? false}))))
1528424686543:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528424748068:(go (println (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528424986138:(go (println (<! (http/get "http://localhost:3000/" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528427010426:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528427014488:(go (println (<! (http/get "http://localhost:3000/" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528427049762:(go (prn (<! (http/get "http://localhost:3000/" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528427148121:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528475165905:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528475174047:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528479220642:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528479227428:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528479363119:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1528479366368:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*"}}))))
1528480108692:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type" "Access-Control-Allow-Origin" "*" "Access-Control-Expose-Headers" "etag, link, x-total, Token"}}))))
1528480164669:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Content-Type, Token" "Access-Control-Allow-Origin" "*" "Access-Control-Expose-Headers" "etag, link, x-total, Token"}}))))
1528482248662:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false :headers {"Access-Control-Allow-Headers" "Authorization" "Access-Control-Allow-Origin" "*" "Access-Control-Expose-Headers" "Authorization"}}))))
1528482288239:(go (prn (<! (http/get "http://localhost:3000" {:with-credentials? false}))))
1528482298169:(go (prn (<! (http/get "http://localhost:3000"))))
1529061054634:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1529061061515:(go (prn (<! (http/get "http://localhost:3000"))))
1529061103136:(go (get-in (<! (http/get "http://localhost:3000")) [:headers "Authorization" "Token"]))
1529061112867:(go (prn (get-in (<! (http/get "http://localhost:3000")) [:headers "Authorization" "Token"])))
1529061135442:(go (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"]))
1529061149272:(go (prn (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])))
1529061433978:(go (prn (js->clj (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"]))))
1529061488007:(go (prn (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"]))))
1529061502379:(go (prn (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])))))
1529061574748:(go (prn (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)))
1529061594701:(go (prn (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true))))
1529061763809:(go (prn (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "")))
1529061863813:(go (prn (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529062027871:(go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\."))))
1529062045247:(goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))
1529062183506:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529062184877:a
1529062190883:(prn a)
1529062288207:(cljs.core.async/<!! (http/get "http://localhost:3000"))
1529062447099:(require '[cljs.core.async :refer [<!!]])
1529062587020:a
1529062596582:(prn a)
1529062656153:(require '[cljs.core.async :refer [poll!]])
1529062661282:(poll! a)
1529062911945:(poll! (http/get "http://localhost:3000"))
1529063086942:(poll! (go (<! (http/get "http://localhost:3000"))))
1529063101019:(go (<! (http/get "http://localhost:3000")))
1529063121280:(def a (go (<! (http/get "http://localhost:3000"))))
1529063125193:(poll! a)
1529063919416:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529063921450:(poll! a)
1529064040920:(JSON/parse (poll! a))
1529064058767:(js->clj (poll! a))
1529064169262:(.parse js/JSON (poll! a))
1529064185106:a
1529064191012:(poll! a)
1529064194096:A
1529064196892:a
1529064198638:(poll! a)
1529064201865:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529064203242:(poll! a)
1529064207997:(.parse js/JSON (poll! a))
1529064211250:a
1529064214332:(poll! a)
1529064224946:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529064227558:(.parse js/JSON (poll! a))
1529064366223:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529064390218:(js->clj (.parse js/JSON (poll! a)) :keywordize-keys true)
1529064929449:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529064959974:(goog.crypt.base64/encodeString "punit")
1529067122603:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529067170595:(go (prn (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true))))
1529067214986:(go (prn (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"]))))
1529067275350:(go (prn (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true))))
1529067563929:(go (prn (goog.crypt.base64/decodeString (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true))))
1529067752289:(goog)
1529067784131:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529067788755:(poll! a)
1529067794430:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529067809807:(goo.crypt.base64/encodeString (poll! a))
1529067813003:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529067819145:(goog.crypt.base64/encodeString (poll! a))
1529067839506:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529067843931:(def b (goog.crypt.base64/encodeString (poll! a)))
1529067846705:b
1529067863650:(goog.crypt.base64/decodeString b)
1529067902319:b
1529067907691:a
1529067999620:(defn parse-json\n  "Parses a JSON string to a Clojure map"\n  ([json-str]\n   (js->clj (.parse js/JSON json-str)))\n  ([json-str keywordize-keys?]\n   (js->clj (.parse js/JSON json-str)\n     :keywordize-keys keywordize-keys?)))
1529068049902:(parse-json b true)
1529068066421:(defn parse-jzon\n  "Parses a JSON string to a Clojure map"\n  ([json-str]\n   (js->clj (.parse js/JSON json-str)))\n  ([json-str keywordize-keys?]\n   (js->clj (.parse js/JSON json-str)\n     :keywordize-keys keywordize-keys?)))
1529068075072:(parse-jzon b true)
1529068128017:(defn parse-jzon\n  "Parses a JSON string to a Clojure map"\n  [json-str keywordize-keys?]\n   (js->clj (.parse js/JSON json-str)\n     :keywordize-keys keywordize-keys?))
1529068131059:(parse-jzon b true)
1529068138656:b
1529068142368:a
1529068157311:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529068175252:(def pp (parse-jzon (poll! a) true))
1529068176664:pp
1529068186511:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529068197795:(def pp (parse-json (poll! a)))
1529068223924:(defn parse-jzon\n  "Parses a JSON string to a Clojure map"\n  ([json-str]\n   (js->clj (.parse js/JSON json-str)))\n  ([json-str keywordize-keys?]\n   (js->clj (.parse js/JSON json-str)\n     :keywordize-keys keywordize-keys?)))
1529068227169:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529068231058:(def pp (parse-json (poll! a)))
1529068235409:(def a (go (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529068241972:(def pp (parse-jzon (poll! a)))
1529068243623:pp
1529068310906:b
1529068356443:(def a (go (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true))))
1529068367421:(def b (poll! a))
1529068368680:b
1529068738092:(def a (go (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true))))
1529068761892:(def b (poll! a))
1529068763222:b
1529068831832:(goog.crypt.base64/decodeString (second (clojure.string/split b #"\\.")))
1529069024618:b
1529069048427:(def c (goog.crypt.base64/decodeString (second (clojure.string/split b #"\\."))))
1529069050398:c
1529069077095:(def c (parse-jzon (goog.crypt.base64/decodeString (second (clojure.string/split b #"\\.")))))
1529069078894:c
1529069095420:(clj->js c)
1529069139801:(.generate js/JSON (clj->js c))
1529507541237:(ns auth.jws.core\n  (:require-macros [cljs.core.async.macros :refer [go]])\n  (:require [cljs-http.client :as http]\n            [cljs.core.async :refer [<!]]))
1529507693132:(go (prn (get-payload (get-token (http/get "http://localhost:3000")))))
1529507756888:(def a (go (get-payload (get-token (http/get "http://localhost:3000")))))
1529507760921:(poll! a)
1529507764282:(def a (go (get-payload (get-token (http/get "http://localhost:3000")))))
1529507765287:(poll! a)
1529507775909:(go (prn (goog.crypt.base64/decodeString (second (clojure.string/split (clojure.string/replace (:Token (js->clj (.parse js/JSON (get-in (<! (http/get "http://localhost:3000")) [:headers "authorization"])) :keywordize-keys true)) #"\\"" "") #"\\.")))))
1529507870190:(go (get-payload (get-token (<! (http/get "http://localhost:3000")))))
1529507880870:(go (prn (get-payload (get-token (<! (http/get "http://localhost:3000"))))))
1529507892942:(def a (go (get-payload (get-token (<! (http/get "http://localhost:3000"))))))
1529507903032:(poll! a)
1529507988015:(def a (go (get-payload (get-token (<! (http/get "http://localhost:3000"))))))
1529507995704:(def b (poll! a))
1529507997270:b
1529508004284:(keys b)
1529508029284:b
1529508046679:(def a (go (get-token (<! (http/get "http://localhost:3000")))))
1529508052170:(def c (poll! a))
1529508053128:c
1529508126970:(def d (re-encode-token c (assoc b :test "test")))
1529508127987:d
1529508138083:(get-payload d)
1529510757879:d
1529510764322:(get-payload d)
1529510766674:d
1529510844705:(http/get "http://localhost:3000" {:headers {"Authorization" {"Token" d}}})
1529510944073:(http/get "http://localhost:3000" {:headers {"Authorization" (generate-json {"Token" d})}})
1529511421147:(http/get "http://localhost:3000" {:headers {"authorization" (generate-json {"jwt" d})}})
1529512078985:c
1529512162270:d
1529512239067:(encodeString d)
1529512293564:(def d (re-encode-token c b))
1529512295036:d
1529512303253:c
1529512496914:(defn encode-payload\n  "Encodes any payload data (cljs map) and cleans the encoded string output"\n  [payload]\n  (replace (encodeString (generate-json payload)) #"\\=" ""))\n\n(defn re-encode-token\n  "Re-encodes JWT with new payload.\n   NOTE: This token HAS to go in the headers where the key is \\"authorization\\" and it's value is\n         a map i.e. (generate-json {\\"jwt\\" <JWT>}). We need to strigify the {\\"jwt\\" <JTW>} map\n   e.g. `(http/get \\"http://localhost:3000\\" {:headers {\\"authorization\\" (generate-json {\\"jwt\\" d})}})`"\n  [token new-payload]\n  (let [[headers payload signature] (split token #"\\.")]\n    (str headers "." (encode-payload new-payload) "." signature)))
1529512520614:(def d (re-encode-token c (assoc b :test "test")))
1529512525718:d
1529513139143:(defn encode-payload\n  "Encodes any payload data (cljs map) and cleans the encoded string output"\n  [payload]\n  (apply str (butlast (encodeString (generate-json payload)))))\n\n(defn re-encode-token\n  "Re-encodes JWT with new payload.\n   NOTE: This token HAS to go in the headers where the key is \\"authorization\\" and it's value is\n         a map i.e. (generate-json {\\"jwt\\" <JWT>}). We need to strigify the {\\"jwt\\" <JTW>} map\n   e.g. `(http/get \\"http://localhost:3000\\" {:headers {\\"authorization\\" (generate-json {\\"jwt\\" d})}})`"\n  [token new-payload]\n  (let [[headers payload signature] (split token #"\\.")]\n    (str headers "." (encode-payload new-payload) "." signature)))
1529513146796:(def d (re-encode-token c (assoc b :test "test")))
1529513148198:d
1529513276151:(encode-payload (assoc b :test "test")))
1529513299332:(generate-json (assoc b :test "test")))
1529513308773:(generate-json (assoc b :test "test"))
1529513329414:(encodeString "{\\"id\\":\\"punit\\",\\"password\\":\\"pass\\",\\"test\\":\\"test\\"}")
1529514095890:(encode-payload b)
1529514120044:(def d (re-encode-token c b))
1529514121437:d
1529514171605:(def d (re-encode-token c (assoc b :test "test")))
1529514172624:d
1529514219693:b
1529514221787:c
1529515118428:(def d (re-encode-token c (assoc b :test "test")))
1529515119953:d
1529515140211:(def d (re-encode-token c b))
1529515141481:d
1529515244305:(def d (re-encode-token c (assoc b :test "test")))
1529515245387:d
1529515267578:(decodeString "eyJpZCI6InB1bml0IiwicGFzc3dvcmQiOiJwYXNzIiwidGVzdCI6InRlc3QifQ==")
1529515285726:(decodeString "eyJpZCI6InB1bml0IiwicGFzc3dvcmQiOiJwYXNzIiwidGVzdCI6InRlc3QifQ=")
1529515344786:c
1529515347516:b
1529515349096:c
1529515419583:(encode-payload b)
1529515611506:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (str/replace "+" "-")\n      (str/replace "/" "_")\n      (str/replace "=" "")))\n\n(defn encode-payload\n  "Encodes any payload data (cljs map) and cleans the encoded string output"\n  [payload]\n  (base64-url-escape (encodeString (generate-json payload))))
1529515641508:(encode-payload c)
1529515644119:c
1529515670441:(defn re-encode-token\n  "Re-encodes JWT with new payload.\n   NOTE: This token HAS to go in the headers where the key is \\"authorization\\" and it's value is\n         a map i.e. (generate-json {\\"jwt\\" <JWT>}). We need to strigify the {\\"jwt\\" <JTW>} map\n   e.g. `(http/get \\"http://localhost:3000\\" {:headers {\\"authorization\\" (generate-json {\\"jwt\\" d})}})`"\n  [token new-payload]\n  (let [[headers payload signature] (split token #"\\.")]\n    (str headers "." (encode-payload new-payload) "." signature)))
1529515685080:(def d (re-encode-token c (assoc b :test "test")))
1529515705430:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace "+" "-")\n      (replace "/" "_")\n      (replace "=" "")))\n\n(defn encode-payload\n  "Encodes any payload data (cljs map) and cleans the encoded string output"\n  [payload]\n  (base64-url-escape (encodeString (generate-json payload))))\n\n(defn re-encode-token\n  "Re-encodes JWT with new payload.\n   NOTE: This token HAS to go in the headers where the key is \\"authorization\\" and it's value is\n         a map i.e. (generate-json {\\"jwt\\" <JWT>}). We need to strigify the {\\"jwt\\" <JTW>} map\n   e.g. `(http/get \\"http://localhost:3000\\" {:headers {\\"authorization\\" (generate-json {\\"jwt\\" d})}})`"\n  [token new-payload]\n  (let [[headers payload signature] (split token #"\\.")]\n    (str headers "." (encode-payload new-payload) "." signature)))
1529515729309:(def d (re-encode-token c (assoc b :test "test")))
1529515731090:d
1529515928001:(def d (re-encode-token c b))
1529515930139:d
1529516103366:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace #"\\+" "-")\n      (replace #"\\/" "_")\n      (replace #"\\=" "")))\n\n(defn encode-payload\n  "Encodes any payload data (cljs map) and cleans the encoded string output"\n  [payload]\n  (base64-url-escape (encodeString (generate-json payload))))\n\n(defn re-encode-token\n  "Re-encodes JWT with new payload.\n   NOTE: This token HAS to go in the headers where the key is \\"authorization\\" and it's value is\n         a map i.e. (generate-json {\\"jwt\\" <JWT>}). We need to strigify the {\\"jwt\\" <JTW>} map\n   e.g. `(http/get \\"http://localhost:3000\\" {:headers {\\"authorization\\" (generate-json {\\"jwt\\" d})}})`"\n  [token new-payload]\n  (let [[headers payload signature] (split token #"\\.")]\n    (str headers "." (encode-payload new-payload) "." signature)))
1529516142532:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace #"\\+" "-")\n      (replace #"\\/" "_")\n      (replace #"\\=" "")))
1529516182567:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace "+" "-")\n      (replace "/" "_")\n      (replace "=" "")))
1529516230049:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace #"\\+" "-")\n      (replace #"\\/" "_")\n      (replace #"\\=" "")))
1529516278429:(replace "punit" #"unit" "n")
1529516286329:(replace "punit" #"+" "n")
1529516305359:(replace "punit" #"\\\\+" "n")
1529516322027:(replace "punit" #"\\\\+" "n"\n(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace #"\\\\+" "-")\n      (replace #"\\\\/" "_")\n      (replace #"\\\\=" ""))))
1529516326639:(defn- base64-url-escape\n  [b64string]\n  (-> b64string\n      (replace #"\\\\+" "-")\n      (replace #"\\\\/" "_")\n      (replace #"\\\\=" "")))
1529516335175:(defn encode-payload\n  "Encodes any payload data (cljs map) and cleans the encoded string output"\n  [payload]\n  (base64-url-escape (encodeString (generate-json payload))))\n\n(defn re-encode-token\n  "Re-encodes JWT with new payload.\n   NOTE: This token HAS to go in the headers where the key is \\"authorization\\" and it's value is\n         a map i.e. (generate-json {\\"jwt\\" <JWT>}). We need to strigify the {\\"jwt\\" <JTW>} map\n   e.g. `(http/get \\"http://localhost:3000\\" {:headers {\\"authorization\\" (generate-json {\\"jwt\\" d})}})`"\n  [token new-payload]\n  (let [[headers payload signature] (split token #"\\.")]\n    (str headers "." (encode-payload new-payload) "." signature)))
1529516348905:(def d (re-encode-token c b))
1529516350195:d
1529516355182:b
